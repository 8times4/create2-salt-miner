name: Release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

env:
  BIN_NAME: "salty"
  PROJECT_NAME: "salty"

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        build: [
            x86_64-linux,
            # aarch64-linux,
            x86_64-macos,
            aarch64-macos,
            x86_64-windows,
            # x86_64-win-gnu,
          ]
        include:
          - build: x86_64-linux
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            cross: false
          # - build: aarch64-linux
          #   os: ubuntu-latest
          #   rust: stable
          #   target: aarch64-unknown-linux-gnu
          #   cross: true
          - build: x86_64-macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
            cross: false
          - build: aarch64-macos
            os: macos-latest
            rust: stable
            target: aarch64-apple-darwin
            cross: false
          - build: x86_64-windows
            os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
            cross: false
          # - build: x86_64-win-gnu
          #   os: windows-latest
          #   rust: stable-x86_64-gnu
          #   target: x86_64-pc-windows-gnu
          #   cross: false

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Toolchain - ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true

      - name: Install Dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libssl-dev pkg-config
          sudo apt-get install -y opencl-headers clinfo
          sudo apt-get install -y ocl-icd-opencl-dev
          sudo apt-get install -y pocl-opencl-icd
          sudo apt-get install -y intel-opencl-icd

      - name: Build Release
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: --release --locked --target ${{ matrix.target }}

      - name: Build Archive
        shell: bash
        run: |
          rm -rf dist
          mkdir dist
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "target/${{ matrix.target }}/release/$BIN_NAME.exe" "dist/"
          else
            cp "target/${{ matrix.target }}/release/$BIN_NAME" "dist/"
          fi

      - uses: actions/upload-artifact@v2.2.4
        with:
          name: bins-${{ matrix.build }}
          path: dist

  publish:
    name: Publish
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: false

      - uses: actions/download-artifact@v2
        # with:
        #   path: dist
      # - run: ls -al ./dist
      - run: ls -al bins-*

      - name: Calculate tag
        run: |
          name=dev
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            name=${GITHUB_REF:10}
          fi
          echo ::set-output name=val::$name
          echo TAG=$name >> $GITHUB_ENV
        id: tagname

      - name: Build Archive
        shell: bash
        run: |
          set -ex

          rm -rf tmp
          mkdir tmp
          rm -rf dist
          mkdir dist

          for dir in bins-* ; do
              platform=${dir#"bins-"}
              if [[ $platform =~ "windows" ]]; then
                  exe=".exe"
              fi
              pkgname=$PROJECT_NAME-$platform
              mkdir tmp/$pkgname
              # cp LICENSE README.md tmp/$pkgname
              mv bins-$platform/$BIN_NAME$exe tmp/$pkgname
              chmod +x tmp/$pkgname/$BIN_NAME$exe

              if [ "$exe" = "" ]; then
                  tar cJf dist/$pkgname.tar.xz -C tmp $pkgname
              else
                  (cd tmp && 7z a -r ../dist/$pkgname.zip $pkgname)
              fi
          done

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*
          file_glob: true
          tag: ${{ steps.tagname.outputs.val }}
          overwrite: true
